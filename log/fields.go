package log

import "github.com/sirupsen/logrus"

type Fields = logrus.Fields

// ContextFields contains values travel through the hole request or job.
type ContextFields struct {

	// TraceID is usually used to trace requests between services. It is
	// usually provided by other services.
	TraceID string `json:"trace_id,omitempty"`

	// RequestID is usually generated by request entry point.
	// For example, in your first request middleware.
	RequestID string `json:"request_id,omitempty"`

	// UserID is used to record user's ID. In case any server use it.
	UserID string `json:"user_id,omitempty"`

	// DeviceID is used to record the device handling current progress.
	DeviceID string `json:"device_id,omitempty"`

	// TargetID is an abstract id field. It can be anything in your system.
	TargetID string `json:"target_id,omitempty"`

	// TargetType is used to indicate target type.
	TargetType string `json:"target_type,omitempty"`

	// ObjectID is an abstract id field like TargetID.
	ObjectID string `json:"object_id,omitempty"`
}

// PayloadFields is used to log request payload, either request body or response body.
type PayloadFields struct {

	// Content is body content. It uses `interface{}` type to provide flexibility to
	// log raw request content as string or structure content.
	Content interface{} `json:"content,omitempty"`
}

// ServerFields contains request basic information on server. Kind should be set to `server`.
type ServerFields struct {

	// Host is request host.
	Host string `json:"host,omitempty"`

	// Remote is address where the request come from.
	Remote string `json:"remote,omitempty"`

	// Method refers HTTP request method if server type is HTTP. It refers
	// service name if server type is gRPC.
	Method string `json:"method,omitempty"`

	// URI is request path. It is used when Kind is server.
	URI string `json:"uri,omitempty"`

	// URL is request url. It is used when Kind is client.
	URL string `json:"url,omitempty"`

	// Referer is just the HTTP Referer.
	Referer string `json:"referer,omitempty"`

	// UserAgent is HTTP User-Agent header.
	UserAgent string `json:"ua,omitempty"`

	// Status is HTTP response status code.
	Status int `json:"status,omitempty"`

	// Service is used by gRPC server.
	Service string `json:"service,omitempty"`

	// Code is usually means gRPC response code.
	Code string `json:"code,omitempty"`

	// Kind is used to indicate if it is server or client.
	Kind string `json:"kind,omitempty"`
}

// ClientFields is same as ServerFields, except you should set Kind to `client`.
type ClientFields ServerFields

// MetricsFields is used to log system metrics. It contains the metrics name and value.
type MetricsFields struct {

	// Name is the metrics name. It is something can describe your metrics.
	Name string `json:"name,omitempty"`

	// Value si the metrics value. Usually int64 is enough for logging metrics.
	Value int64 `json:"value"`
}

// ProcessMetricsFields is use to log process states
type ProcessMetricsFields struct {
	// Goroutine is the number of goroutine
	Goroutine int `json:"goroutine,omitempty"`

	// Alloc is bytes of allocated heap objects.
	Alloc uint64 `json:"alloc,omitempty"`

	// TotalAlloc is cumulative bytes allocated for heap objects.
	TotalAlloc uint64 `json:"total_alloc,omitempty"`

	// Sys is the total bytes of memory obtained from the OS.
	Sys uint64 `json:"sys,omitempty"`

	// Mallocs is the cumulative count of heap objects allocated.
	Mallocs uint64 `json:"mallocs,omitempty"`

	// Frees is the cumulative count of heap objects freed.
	Frees uint64 `json:"frees,omitempty"`

	// LiveObject is the number of live objects is Mallocs - Frees.
	LiveObjects uint64 `json:"live_objects,omitempty"`

	// HeapObjects is the number of allocated heap objects.
	HeapObjects uint64 `json:"heap_objects,omitempty"`

	// PauseTotalNs is the cumulative nanoseconds in GC
	// stop-the-world pauses since the program started.
	PauseTotalNs uint64 `json:"pause_total_ns,omitempty"`

	// NumGC is the number of completed GC cycles.
	NumGC uint32 `json:"num_gc,omitempty"`
}
